/*
 * Board-Specific Configuration: Qualcomm Snapdragon 670
 *
 * Copyright (C) 2019-2022 Udo Steinberg, BedRock Systems, Inc.
 *
 * This file is part of the NOVA microhypervisor.
 *
 * NOVA is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * NOVA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License version 2 for more details.
 */

#pragma once

#define LOAD_ADDR       0x100000000

#ifndef __ASSEMBLER__

#include "types.hpp"

struct Board
{
    static constexpr uint64 spin_addr { 0 };
    static constexpr struct Cpu { uint64 id; } cpu[8] { { 0x000 }, { 0x100 }, { 0x200 }, { 0x300 }, { 0x400 }, { 0x500 }, { 0x600 }, { 0x700 } };
    static constexpr struct Tmr { unsigned ppi, flg; } tmr[2] { { 0x0, 0x8 }, { 0x3, 0x8 } };
    static constexpr struct Gic { uint64 mmio, size; } gic[4] { { 0x17a00000, 0x10000 }, { 0x17a60000, 0x100000 }, { 0, 0 }, { 0, 0 } };
    static constexpr struct Uart { Uart_type type; uint64 mmio; unsigned clock; } uart { Uart_type::GENI, 0xa90000, 0 };
    static constexpr struct Smmu { uint64 mmio; struct { unsigned spi, flg; } glb[1], ctx[64]; } smmu[1]
    {   {   0x15000000,
            {   { 0x041, 0x4 }, },
            {   { 0x060, 0x4 }, { 0x061, 0x4 }, { 0x062, 0x4 }, { 0x063, 0x4 }, { 0x064, 0x4 }, { 0x065, 0x4 }, { 0x066, 0x4 }, { 0x067, 0x4 },
                { 0x068, 0x4 }, { 0x069, 0x4 }, { 0x06a, 0x4 }, { 0x06b, 0x4 }, { 0x06c, 0x4 }, { 0x06d, 0x4 }, { 0x06e, 0x4 }, { 0x06f, 0x4 },
                { 0x070, 0x4 }, { 0x071, 0x4 }, { 0x072, 0x4 }, { 0x073, 0x4 }, { 0x074, 0x4 }, { 0x075, 0x4 }, { 0x076, 0x4 }, { 0x0b5, 0x4 },
                { 0x0b6, 0x4 }, { 0x0b7, 0x4 }, { 0x0b8, 0x4 }, { 0x0b9, 0x4 }, { 0x0ba, 0x4 }, { 0x0bb, 0x4 }, { 0x0bc, 0x4 }, { 0x0bd, 0x4 },
                { 0x0be, 0x4 }, { 0x0bf, 0x4 }, { 0x0c0, 0x4 }, { 0x13b, 0x4 }, { 0x13c, 0x4 }, { 0x13d, 0x4 }, { 0x13e, 0x4 }, { 0x13f, 0x4 },
                { 0x140, 0x4 }, { 0x141, 0x4 }, { 0x142, 0x4 }, { 0x143, 0x4 }, { 0x144, 0x4 }, { 0x145, 0x4 }, { 0x146, 0x4 }, { 0x147, 0x4 },
                { 0x148, 0x4 }, { 0x149, 0x4 }, { 0x14a, 0x4 }, { 0x14b, 0x4 }, { 0x14c, 0x4 }, { 0x14d, 0x4 }, { 0x14e, 0x4 }, { 0x14f, 0x4 },
                { 0x150, 0x4 }, { 0x151, 0x4 }, { 0x152, 0x4 }, { 0x153, 0x4 }, { 0x154, 0x4 }, { 0x155, 0x4 }, { 0x156, 0x4 }, { 0x157, 0x4 },
            }
        }
    };
};

#endif
